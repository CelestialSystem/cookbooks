{"source":2,"revision":270,"description":null,"createdBy":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"createdOn":"2020-08-13T13:56:58.923Z","modifiedBy":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"modifiedOn":"2020-08-31T11:36:43.610Z","isDeleted":false,"lastRelease":{"id":143,"name":"Release-38","artifacts":[],"_links":{},"description":"","releaseDefinition":{"id":9,"projectReference":null,"_links":{}},"createdOn":"2020-08-31T08:16:57.367Z","createdBy":{"displayName":"RobG","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/487cda59-985a-6d45-a343-607e62446177","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3"}},"id":"487cda59-985a-6d45-a343-607e62446177","uniqueName":"robert@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3","descriptor":"aad.NDg3Y2RhNTktOTg1YS03ZDQ1LWEzNDMtNjA3ZTYyNDQ2MTc3"}},"variables":{"Build-all":{"value":"True","allowOverride":true},"Build-w12r2d-14-2":{"value":"False","allowOverride":true},"Build-w12r2d-15-0":{"value":"False","allowOverride":true},"Build-w16d-14-2":{"value":"False","allowOverride":true},"Build-w16d-15-0":{"value":"False","allowOverride":true},"Build-w19d-14-2":{"value":"False","allowOverride":true},"Build-w19d-15-0":{"value":"False","allowOverride":true},"CookbooksSource":{"value":"$(System.DefaultWorkingDirectory)\\cookbooks"},"ResourceGroupName":{"value":"BakingDP","allowOverride":true},"SubscriptionId":{"value":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","allowOverride":true}},"variableGroups":[3,1,5],"environments":[{"id":65,"name":"Preview w12r2d142","rank":2,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":195}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":206},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":210}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Preview Image","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the preview image in the marketplace\n2. Increment the Version number in the Image Build Pipeline\n3. Increment the Test Version Preview Variable (TestVersionPrev<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"IMG Test w12r2d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/65"},{"id":66,"name":"PrevTest w12r2d142","rank":3,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":196}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":204},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":205}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job : Australia East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-AE-w12r2d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pa1214$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-AE-w12r2d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-AE-w12r2d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-AE-w12r2d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":1,"name":"Agent job : US East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-UE-w12r2d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pu1214$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-UE-w12r2d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-UE-w12r2d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-UE-w12r2d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_Lansa Images - Cookbooks","artifactType":"Build","artifactDownloadMode":"All","artifactItems":[]},{"alias":"_lansa_azure-quickstart-templates","artifactType":"GitHub","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":3,"phaseType":1,"name":"Agent job: Central France Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-FC-w12r2d-14-2","location":"France Central","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pf1214$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-FC-w12r2d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-FC-w12r2d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-FC-w12r2d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Preview w12r2d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/66"},{"id":67,"name":"Prod w12r2d142","rank":4,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":197}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":203},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":207}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Production","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the preview image in the marketplace\n2. Increment the Test Version Production Variable (TestVersion<SKU>) in the \"SKU Version\" Variable Group.\n3. Then click resume","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"PrevTest w12r2d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/67"},{"id":68,"name":"ProdTest w12r2d142","rank":5,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":198}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":202},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":208}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"vs2017-win2016"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Prod-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Prod-w12r2d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pr1214$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Prod-w12r2d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Prod-w12r2d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Prod-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Prod-w12r2d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Prod w12r2d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":103,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/103","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/68"},{"id":77,"name":"IMG Test w12r2d142","rank":1,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":232}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":233},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":234}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-14-2/w12r2d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Custom-w12r2d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -imageId \"$(Gate.ImageUrl)\" -imageSource \"Custom\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"c1214$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Custom-w12r2d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Custom-w12r2d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Custom-w12r2d-14-2","location":"","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"","csmParametersFile":"","overrideParameters":"","deploymentMode":"Incremental","deploymentName":"","deploymentOutputs":"","addSpnToEnvironment":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/77"},{"id":78,"name":"IMG Test w12r2d150","rank":6,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":236}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":245},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":246}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Custom-w12r2d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V15 GA\" -imageId \"$(Gate.ImageUrl)\" -imageSource \"Custom\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"c1215$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Custom-w12r2d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Custom-w12r2d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Custom-w12r2d-15-0","location":"","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"","csmParametersFile":"","overrideParameters":"","deploymentMode":"Incremental","deploymentName":"","deploymentOutputs":"","addSpnToEnvironment":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/78"},{"id":79,"name":"Preview w12r2d150","rank":7,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":237}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":244},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":247}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Preview Image","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the preview image in the marketplace\n2. Increment the Version number in the Image Build Pipeline\n3. Increment the Test Version Preview Variable (TestVersionPrev<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"IMG Test w12r2d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/79"},{"id":80,"name":"PrevTest w12r2d150","rank":8,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":238}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":243},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":248}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job : Australia East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w12r2d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-AE-w12r2d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pa1215$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-AE-w12r2d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-AE-w12r2d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w12r2d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-AE-w12r2d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":1,"name":"Agent job : US East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w12r2d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-UE-w12r2d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pu1215$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-UE-w12r2d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-UE-w12r2d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w12r2d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-UE-w12r2d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":3,"phaseType":1,"name":"Agent job: Central France Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-15-0/w12r2d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w12r2d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-FC-w12r2d-15-0","location":"France Central","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pf1215$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-FC-w12r2d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-FC-w12r2d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w12r2d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-FC-w12r2d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Preview w12r2d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/80"},{"id":81,"name":"Prod w12r2d150","rank":9,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":239}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":242},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":249}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Production","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the production image in the marketplace\n2. Increment the Test Version Production Variable (TestVersion<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"PrevTest w12r2d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/81"},{"id":82,"name":"ProdTest w12r2d150","rank":10,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":240}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":241},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":250}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"vs2017-win2016"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w12r2d-15-0/w12r2d-15-0txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Prod-w12r2d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Prod-w12r2d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pr1215$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Prod-w12r2d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Prod-w12r2d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Prod-w12r2d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Prod-w12r2d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Prod w12r2d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":103,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/103","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/82"},{"id":83,"name":"IMG Test w16d142","rank":11,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":251}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":270},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":271}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Custom-w16d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V14 SP2\" -imageId \"$(Gate.ImageUrl)\" -imageSource \"Custom\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"c1614$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Custom-w16d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Custom-w16d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Custom-w16d-14-2","location":"","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"","csmParametersFile":"","overrideParameters":"","deploymentMode":"Incremental","deploymentName":"","deploymentOutputs":"","addSpnToEnvironment":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/83"},{"id":84,"name":"Preview w16d142","rank":12,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":252}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":269},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":272}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Preview Image","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the preview image in the marketplace\n2. Increment the Version number in the Image Build Pipeline\n3. Increment the Test Version Preview Variable (TestVersionPrev<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"IMG Test w16d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/84"},{"id":85,"name":"PrevTest w16d142","rank":13,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":253}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":268},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":273}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job : Australia East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-AE-w16d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pa1614$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-AE-w16d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-AE-w16d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-AE-w16d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":1,"name":"Agent job : US East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-UE-w16d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pu1614$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-UE-w16d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-UE-w16d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-UE-w16d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_Lansa Images - Cookbooks","artifactType":"Build","artifactDownloadMode":"All","artifactItems":[]},{"alias":"_lansa_azure-quickstart-templates","artifactType":"GitHub","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":3,"phaseType":1,"name":"Agent job: Central France Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-FC-w16d-14-2","location":"France Central","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pf1614$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-FC-w16d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-FC-w16d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-FC-w16d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Preview w16d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/85"},{"id":86,"name":"Prod w16d142","rank":14,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":254}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":267},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":274}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Production","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the production image in the marketplace\n2. Increment the Test Version Production Variable (TestVersion<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"PrevTest w16d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/86"},{"id":87,"name":"ProdTest w16d142","rank":15,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":255}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":266},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":275}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"vs2017-win2016"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-14-2/w16d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Prod-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Prod-w16d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pr1614$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Prod-w16d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Prod-w16d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Prod-w16d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Prod-w16d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Prod w16d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":103,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/103","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/87"},{"id":88,"name":"IMG Test w16d150","rank":16,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":260}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":261},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":280}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Custom-w16d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V15 GA\" -imageId \"$(Gate.ImageUrl)\" -imageSource \"Custom\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"c1615$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Custom-w16d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Custom-w16d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Custom-w16d-15-0","location":"","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"","csmParametersFile":"","overrideParameters":"","deploymentMode":"Incremental","deploymentName":"","deploymentOutputs":"","addSpnToEnvironment":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/88"},{"id":89,"name":"Preview w16d150","rank":17,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":259}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":262},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":279}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Preview Image","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the preview image in the marketplace\n2. Increment the Version number in the Image Build Pipeline\n3. Increment the Test Version Preview Variable (TestVersionPrev<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"IMG Test w16d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/89"},{"id":90,"name":"PrevTest w16d150","rank":18,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":258}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":263},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":278}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job : Australia East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-AE-w16d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pa1615$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build- w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-AE-w16d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-AE-w16d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-AE-w16d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":1,"name":"Agent job : US East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-UE-w16d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pu1615$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-UE-w16d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-UE-w16d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-UE-w16d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_Lansa Images - Cookbooks","artifactType":"Build","artifactDownloadMode":"All","artifactItems":[]},{"alias":"_lansa_azure-quickstart-templates","artifactType":"GitHub","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":3,"phaseType":1,"name":"Agent job: Central France Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-FC-w16d-15-0","location":"France Central","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pf1615$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-FC-w16d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-FC-w16d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-FC-w16d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Preview w16d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/90"},{"id":91,"name":"Prod w16d150","rank":19,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":257}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":264},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":277}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Production","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the production image in the marketplace\n2. Increment the Test Version Production Variable (TestVersion<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"PrevTest w16d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":138,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/138","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/91"},{"id":92,"name":"ProdTest w16d150","rank":20,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":256}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":265},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":276}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"vs2017-win2016"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w16d-15-0/w16d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Prod-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Prod-w16d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2016\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pr1615$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Prod-w16d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output copy","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Prod-w16d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Prod-w16d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Prod-w16d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Prod w16d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":103,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/103","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/92"},{"id":93,"name":"IMG Test w19d142","rank":21,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":281}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":300},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":301}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Custom-w19d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V14 SP2\" -imageId \"$(Gate.ImageUrl)\" -imageSource \"Custom\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"c1914$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Custom-w19d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Custom-w19d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Custom-w19d-14-2","location":"","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"","csmParametersFile":"","overrideParameters":"","deploymentMode":"Incremental","deploymentName":"","deploymentOutputs":"","addSpnToEnvironment":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/93"},{"id":94,"name":"Preview w19d142","rank":22,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":282}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":299},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":302}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Preview Image","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the preview image in the marketplace\n2. Increment the Version number in the Image Build Pipeline\n3. Increment the Test Version Preview Variable (TestVersionPrev<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"IMG Test w19d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/94"},{"id":95,"name":"PrevTest w19d142","rank":23,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":283}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":298},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":303}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job : Australia East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-AE-w19d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pa1914$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-AE-w19d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-AE-w19d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-AE-w19d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":1,"name":"Agent job : US East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-UE-w19d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pu1914$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-UE-w19d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-UE-w19d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-UE-w19d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_Lansa Images - Cookbooks","artifactType":"Build","artifactDownloadMode":"All","artifactItems":[]},{"alias":"_lansa_azure-quickstart-templates","artifactType":"GitHub","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":3,"phaseType":1,"name":"Agent job: Central France Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-FC-w19d-14-2","location":"France Central","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pf1914$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-FC-w19d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-FC-w19d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-FC-w19d-14-2","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Preview w19d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":139,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/139","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/95"},{"id":96,"name":"Prod w19d142","rank":24,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":284}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":297},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":304}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Production","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the production image in the marketplace\n2. Increment the Test Version Production Variable (TestVersion<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"PrevTest w19d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":139,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/139","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/96"},{"id":97,"name":"ProdTest w19d142","rank":25,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":285}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":296},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":305}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"vs2017-win2016"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-14-2/w19d-14-2.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Prod-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Prod-w19d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"pr1914$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Prod-w19d-14-2","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Prod-w19d-14-2\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Prod-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Prod-w19d-14-2","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Prod w19d142","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":124,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/124","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/97"},{"id":98,"name":"IMG Test w19d150","rank":26,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":286}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":295},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":306}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Custom-w19d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V15 GA\" -imageId \"$(Gate.ImageUrl)\" -imageSource \"Custom\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"c1915$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Custom-w19d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w12r2d-14-2'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Custom-w19d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-CustomImageTest","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Custom-w19d-15-0","location":"","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"","csmParametersFile":"","overrideParameters":"","deploymentMode":"Incremental","deploymentName":"","deploymentOutputs":"","addSpnToEnvironment":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/98"},{"id":99,"name":"Preview w19d150","rank":27,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":287}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":294},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":307}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Preview Image","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the preview image in the marketplace\n2. Increment the Version number in the Image Build Pipeline\n3. Increment the Test Version Preview Variable (TestVersionPrev<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"IMG Test w19d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":143,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/143","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"unmapped"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":5,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/99"},{"id":100,"name":"PrevTest w19d150","rank":28,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":288}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":293},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":308}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job : Australia East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w19d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-AE-w19d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pa1915$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True'))) ","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-AE-w19d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-AE-w19d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w19d-14-2","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-AE-w19d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":1,"name":"Agent job : US East Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w19d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-UE-w19d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pu1915$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-UE-w19d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-UE-w19d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w19d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-UE-w19d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"windows-2019"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_Lansa Images - Cookbooks","artifactType":"Build","artifactDownloadMode":"All","artifactItems":[]},{"alias":"_lansa_azure-quickstart-templates","artifactType":"GitHub","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":3,"phaseType":1,"name":"Agent job: Central France Region","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-15-0/w19d-15-0.txt\"\nif (Test-Path $path) {\n   $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Preview-w19d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Preview-FC-w19d-15-0","location":"France Central","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pf1915$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Preview-FC-w19d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"$(Log-Date) The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Preview-FC-w19d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Preview-w19d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Preview-FC-w19d-15-0","location":"Australia East","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -gitBranch \"debug/paas\" -imageSource \"Marketplace\" -imageReleaseState \"Preview\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Preview w19d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":139,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/139","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/100"},{"id":101,"name":"Prod w19d150","rank":29,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":289}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":292},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":309}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":2,"name":"Agentless job","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Publish Production","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"1. Publish the production image in the marketplace\n2. Increment the Test Version Production Variable (TestVersion<SKU>) in the \"SKU Version\" Variable Group.","emailRecipients":"","onTimeout":"reject"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"PrevTest w19d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":139,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/139","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/101"},{"id":102,"name":"ProdTest w19d150","rank":30,"owner":{"displayName":"Varun Chopra","url":"https://spsprodeau1.vssps.visualstudio.com/A074edf4b-c1eb-403e-828d-96de9041e576/_apis/Identities/3d61d285-fce6-676a-a647-4bbe10ded415","_links":{"avatar":{"href":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"}},"id":"3d61d285-fce6-676a-a647-4bbe10ded415","uniqueName":"VarunChopra@lansacloudlansacom.onmicrosoft.com","imageUrl":"https://dev.azure.com/VisualLansa/_apis/GraphProfile/MemberAvatars/aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1","descriptor":"aad.M2Q2MWQyODUtZmNlNi03NzZhLWE2NDctNGJiZTEwZGVkNDE1"},"variables":{},"variableGroups":[],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":290}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":291},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":310}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":0},"agentSpecification":{"identifier":"vs2017-win2016"},"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":9,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":1,"name":"Agent job","refName":null,"workflowTasks":[{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Set Gate Variable","refName":"Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Set the Gate variable if the file exists\n$path = \"$(System.DefaultWorkingDirectory)/_Lansa Images - Cookbooks/w19d-15-0/w19d-15-0txt\"\nif (Test-Path $path) {\n    $rawUri = Get-Content -Path $path -Raw\n    Write-Host $rawUri | Out-Default | Write-Verbose\n    $rawUri -match '[\\w-]+\\.vhd'\n    Write-Host $Matches[0] | Out-Default | Write-Verbose\n    $Matches[0] -match '[^.]+'\n    $sku = $Matches[0]\n    Write-Host $sku | Out-Default | Write-Verbose\n    Write-Host \"##vso[task.setvariable variable=Sku;isOutput=true]$sku\" | Out-Default | Write-Verbose    \t\n    $uri = \"/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/$($Matches[0])image\"\n    # Set Variables\n    Write-Host \"##vso[task.setvariable variable=ImageUrl;isOutput=true]$uri\" | Out-Default | Write-Verbose    \t\n    Write-Host \"##vso[task.setvariable variable=IsEnabled;isOutput=true]True\" | Out-Default | Write-Verbose\n    Write-host \"The value of Variable IsEnabled is updated to True and output variable ImageUrl to $uri\" | Out-Default | Write-Verbose\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Artifact Check : Output Gate Variable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Gate variables.\nWrite-Host \"Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageUrl: $(Gate.ImageUrl) Gate.Sku: $(Gate.Sku)\" | Out-Default\n\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Deploy ARM Template : BakingDP-Prod-w19d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"Create Or Update Resource Group","resourceGroupName":"BakingDP-Prod-w19d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2019\" -lansaVersion \"V15 GA\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v15.0.0_en-us.msi\" -stackName \"pr1915$(Build.BuildNumber)\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}},{"environment":{},"taskId":"567f7830-5655-4d11-b4c5-bada59a77796","version":"1.*","name":"Azure Resource Group Tagging","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","Action":"Add","ResourceGroupName":"BakingDP-Prod-w19d-15-0","Key":"Usage","Value":"test-temp"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print Deployment Output","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Print the Deployment Output\nWrite-Host \"$(deploymentOutput)\" | out-default | Write-Verbose","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Test ARM Deployment : URL Tests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Use the deployment output to extract the IpAddress\n$deploymentOutput=ConvertFrom-Json '$(deploymentOutput)'\n$IpAddress = $deploymentOutput.lbFqdn.value\n$url1 = \"$IpAddress/cgi-bin/probe\"\n$url2 = \"$IpAddress/cgi-bin/lansaweb?about\"\n$url3 = \"$IpAddress/cgi-bin/lansaweb?wam=DEPTABWA&webrtn=BuildFirst&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$url4 = \"$IpAddress/cgi-bin/lansaweb?wam=JSMLICE&webrtn=weblic&ml=LANSA:XHTML&part=DEX&lang=ENG\"\n$urls = @($url1, $url2, $url3, $url4)\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n$failureCount = 0\nforEach($url in $urls) {\n    try{\n        $response = Invoke-WebRequest -Uri $url -TimeoutSec 14\n        $ResponseCode = $response.StatusCode\n        if($ResponseCode -ne 200) {\n            Write-Host \"Response code not equal to 200: $ResponseCode\" | Out-Default | Write-Verbose\n            $failureCount = $failureCount + 1\n        } else {\n            Write-Host $ResponseCode | Out-Default | Write-Verbose\n        }\n    } catch {\n        Write-Host $_.Exception | Out-Default | Write-Verbose\n        $ResponseCode = $_.Exception.Response.StatusCode.Value__\n        $failureCount = $failureCount + 1\n        Write-Host $ResponseCode | Out-Default | Write-Verbose\n    }\n}\nif($failureCount) {\n    Write-Host \"Request failed for $($failureCount) URL(s)\"\n    throw \"The deployment failed the URL tests\"\n} else {\n    Write-Host \"Successfully tested all URL(s)\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"72a1931b-effb-4d2e-8fd8-f8472a07cb62","version":"5.*","name":"Azure PowerShell : Test Image Version","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"ConnectedServiceNameARM":"e61ac796-c298-4e1f-a8dc-98fb50faa590","ScriptType":"InlineScript","ScriptPath":"","Inline":"Install-Module -Name Az.Compute -AllowClobber -Force\nWrite-Host \"$(Gate.Sku)\"\n$SkuName = \"$(Gate.Sku)\"\n\n$var=ConvertFrom-Json '$(deploymentOutput)'\n\n# Download TestImageVersion PS Script\nNew-Item -Path \"$(CookbooksSource)\\Tests\\Tests\" -ItemType Directory -verbose\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/robe070/cookbooks/$(CookbooksBranch)/Tests/TestImageVersion.ps1\" -OutFile \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -verbose\n\n$vmssName = $var.scalesetName.value\nWrite-Host $vmssName | Out-Default\n\n # Execute the TestImageVersion PS Script\nWrite-Host \"Test the image version $SkuName by executing the script in the VMSS $vmssName\" | Out-Default | Write-Verbose\n$result = Invoke-AzVmssVMRunCommand -ResourceGroupName \"BakingDP-Prod-w19d-15-0\" -VMScaleSetName $vmssName -InstanceId '0' -CommandId 'RunPowerShellScript' -ScriptPath \"$(CookbooksSource)\\Tests\\TestImageVersion.ps1\" -Parameter @{ImgName = $SkuName}\n$result | Out-Default | Write-Host\nif ($result.Value[1].message -eq \"\") {\n    Write-Host \"Tested the image version in the VMSS successfully.\"\n} else {\n    throw $result.Value[1].message\n}","ScriptArguments":"","errorActionPreference":"stop","FailOnStandardError":"false","TargetAzurePs":"LatestVersion","CustomTargetAzurePs":"","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"94a74903-f93f-4075-884f-dc11f34058b4","version":"3.*","name":"Delete RG: BakingDP-Prod-w19d-15-0","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))","inputs":{"deploymentScope":"Resource Group","ConnectedServiceName":"e61ac796-c298-4e1f-a8dc-98fb50faa590","subscriptionName":"739c4e86-bd75-4910-8d6e-d7eb23ab94f3","action":"DeleteRG","resourceGroupName":"BakingDP-Prod-w19d-15-0","location":"East US","templateLocation":"Linked artifact","csmFileLink":"","csmParametersFileLink":"","csmFile":"$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json","csmParametersFile":"","overrideParameters":"-osName \"Windows Server 2012\" -lansaVersion \"V14 SP2\" -msiURL \"https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.2.20715_en-us.msi\" -stackName \"customimg\" -certificateBase64Encoded \"$(certificateBase64Encoded)\" -certificatePassword \"$(certificatePassword)\" -databaseLogin \"$(databaseLogin)\" -databaseLoginPassword \"$(databaseLoginPassword)\" -adminUsername \"$(adminUsername)\" -adminPassword \"$(adminPassword)\" -webUsername \"$(webUsername)\" -webPassword \"$(webPassword)\" -imageSource \"Marketplace\" -imageReleaseState \"Production\"","deploymentMode":"Incremental","deploymentName":"CustomTestTemplate","deploymentOutputs":"deploymentOutput","addSpnToEnvironment":"true"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Prod w19d150","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":124,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/releases/124","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"BoardsEnvironmentType":{"$type":"System.String","$value":"production"},"LinkBoardsWorkItems":{"$type":"System.String","$value":"False"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/VisualLansa/_apis/public/Release/badge/8b247587-8424-435c-9068-7e9fdd0edcf1/9/102"}],"artifacts":[{"sourceId":"8b247587-8424-435c-9068-7e9fdd0edcf1:7","type":"Build","alias":"_Lansa Images - Cookbooks","definitionReference":{"artifactSourceDefinitionUrl":{"id":"https://dev.azure.com/VisualLansa/_permalink/_build/index?collectionId=556ac44f-caae-4fef-a5b6-d964fed453e6&projectId=8b247587-8424-435c-9068-7e9fdd0edcf1&definitionId=7","name":""},"defaultVersionBranch":{"id":"","name":""},"defaultVersionSpecific":{"id":"","name":""},"defaultVersionTags":{"id":"","name":""},"defaultVersionType":{"id":"latestType","name":"Latest"},"definition":{"id":"7","name":"Lansa Images - Cookbooks"},"definitions":{"id":"","name":""},"IsMultiDefinitionType":{"id":"False","name":"False"},"project":{"id":"8b247587-8424-435c-9068-7e9fdd0edcf1","name":"Lansa Azure Scalable License Images"},"repository":{"id":"","name":""}},"isPrimary":true,"isRetained":false},{"sourceId":"9d6d2af7-59b3-4a25-a732-193412ebf91c:lansa/azure-quickstart-templates","type":"GitHub","alias":"_lansa_azure-quickstart-templates","definitionReference":{"artifactSourceDefinitionUrl":{"id":"https://github.com/lansa/azure-quickstart-templates","name":""},"branch":{"id":"support/scalable","name":"support/scalable"},"checkoutNestedSubmodules":{"id":"True","name":"Any nested submodules within"},"checkoutSubmodules":{"id":"","name":""},"connection":{"id":"9d6d2af7-59b3-4a25-a732-193412ebf91c","name":"lansa"},"defaultVersionSpecific":{"id":"","name":""},"defaultVersionType":{"id":"latestFromBranchType","name":"Latest from the default branch"},"definition":{"id":"lansa/azure-quickstart-templates","name":"lansa/azure-quickstart-templates"},"fetchDepth":{"id":"","name":""},"gitHubRepositoryId":{"id":"65955667","name":"65955667"},"gitLfsSupport":{"id":"","name":""}},"isRetained":false}],"triggers":[],"releaseNameFormat":"Release-$(rev:r)","tags":[],"properties":{"DefinitionCreationSource":{"$type":"System.String","$value":"ReleaseClone"},"IntegrateBoardsWorkItems":{"$type":"System.String","$value":"False"},"IntegrateJiraWorkItems":{"$type":"System.String","$value":"false"}},"id":9,"name":"Image Release","path":"\\Lansa","projectReference":null,"url":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/definitions/9","_links":{"self":{"href":"https://vsrm.dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_apis/Release/definitions/9"},"web":{"href":"https://dev.azure.com/VisualLansa/8b247587-8424-435c-9068-7e9fdd0edcf1/_release?definitionId=9"}}}