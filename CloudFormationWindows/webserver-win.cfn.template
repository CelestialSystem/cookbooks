{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description": "Deploy a LANSA WAM application into an auto scaling group. This template is designed to be executed by the parent lansa-master-win.cfn.template stack. Parameters described as Update Stack: are only modified after the stack has been created",
    "Parameters"               : {
        "LansaType" : {
            "Type"        : "String",
            "Default" : "WebServer"
        },
        "LansaMSI" : {
            "Type"        : "String",
            "Default" : "https://s3-ap-southeast-2.amazonaws.com/lansa/app/Test/AWAMAPP_v1.0.0_en-us.msi"
        },
        "LansaMSIBitness" : {
            "Default" : "1",
            "Type"        : "String",
            "AllowedValues" : [
                "1",
                "0"
            ],
            "ConstraintDescription" : "Must be either true or false."
        },        
        "LansaTemplateLevel" : {
            "Default" : "R",
            "Description" : "Set to 'R' to use the Release version of the Web Server template. Set to 'B' to use the Beta version of the Web Server template. This must match the version of lansa-master-win.cfn.template being used.",
            "Type"        : "String",
            "AllowedValues" : [
                "R",
                "B"
            ],
            "ConstraintDescription" : "Must be either R (Release) or B (Beta)."
        },
        "KeyName" : {
            "Type"        : "String",
            "Default" : "Linux-keypair"
        },
        "InstanceType" : {
            "Type"        : "String"
        },
        "DBEndPoint"       : {
            "Type"        : "String",
            "Default" : "tdgxg1ddiuto85.cemy5sqefsvw.ap-southeast-2.rds.amazonaws.com"
        },
        "DBName"       : {
            "Type"        : "String",
            "Default" : "lansadb"
        },
        "DBUsername"   : {
            "NoEcho"  : "true",
            "Type"    : "String",
            "Default" : "admin"
        },
        "DBPassword"   : {
            "NoEcho"  : "true",
            "Type"    : "String",
            "Default" : "password"
        },
        "WebServerCapacity" : {
            "Type"        : "Number",
            "Default" : 1
        },
        "WebServerMaxConnect" : {
            "Type"        : "Number",
            "Default" : 20
        },        
        "RemoteAccessLocation"        : {
            "Type"        : "String",
            "Default" : "103.231.159.65/32"
        },
        "ELBTimeout"         : {
            "Type"        : "Number"
        },
        "AMI"  : {
            "Default"     : "ami-bb6b1881",
            "Type"        : "String"
        },
        "SecurityGroup": {
            "Type"        : "String",
            "Default" : "test-win-3-LansaSecurityGroup-132Y0YU59S9WI"
        },
        "LoadBalancer": {
            "Type"        : "String",
            "Default" : "test-win-WebServe-1DMYEQVA42DWE"
        },
        "AccessKeyId": {
            "Type"        : "String",
            "Default" : "AKI"
        },
        "SecretKey": {
            "Type"        : "String",
            "Default" : "sss"
        },
        "WebUser"   : {
            "Type"    : "String",
            "Default" : "PCXUSER2"
        },
        "WebPassword"   : {
            "NoEcho"  : "true",
            "Type"    : "String",
            "Default" : "PCXUSER@122"
        },
        "DummyRef"    : {
            "Type"    : "String",
            "Default" : "DummyValue",
            "Description" : "Allows one ASG to be sequenced after another. See master template use of this parameter. It is not used withing this template"
            },
        "TriggerCakeUpdate" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: Increment this by one to trigger a Cake update. This is the sdame as triggerring both a ChefUpdate and a WindowsUpdate. Mainly to ensure that Windows Updates have been applied. The same script is executed that baked the Cake in the first place. (The Cake is the AMI from which this instance was instantiated)"
        },
        "TriggerChefUpdate" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: Increment this by one to run a Chef update. The same script is executed that baked the Cake in the first place. (The Cake is the AMI from which this instance was instantiated)"
        },
        "TriggerWindowsUpdate" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: Increment this by one to trigger a Windows Update. The same script is executed that baked the Cake in the first place. (The Cake is the AMI from which this instance was instantiated)"
        },
        "TriggerWebConfig" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: Increment this by one to trigger an update to the web configuration"
        },
        "TriggerIcingUpdate" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: Increment this by one to trigger an MSI Upgrade. Obtains the specified MSI and installs it. Ensure the LansaMSI parameter is set correctly."
        },
        "TriggerPatchInstall" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: Increment this by one to trigger patches to be installed. Obtains all MSPs and applies those not already applied."
        },
        "PatchBucketName" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: S3 Bucket which will contain the patches. (case sensitive)"
        },
        "PatchFolderName" : {
            "Type"    : "String",
            "Default" : "1",
            "Description" : "Update Stack: S3 folder which will contain the patches. (case sensitive)"
        },
        "UserScriptHook" : {
            "Type"    : "String",
            "Default" : "",
            "Description" : "URL of a Powershell script to execute after installing the LANSA MSI. The script must have been previously uploaded to the specified location in Amazon S3 BLOB storage."
        },
        "SetConnectTrace" : {
            "Type"    : "String",
            "Default" : "N"
        },
        "SetIISTrace" : {
            "Type"    : "String",
            "Default" : "N"
        },
        "SetXRUNEnvVar" : {
            "Type"    : "String",
            "Default" : "ITRO=N ITRL=4 ITRM=9999999999",
            "Description" : "Set tracing parameters for the LANSA jobs in the x_run system environment variable. Overwrites existing value. Restarts web jobs"
        },
       "LogRoleInstanceProfile" : {
            "Type"    : "String",
            "Description" : "IAM Instance Role"
       }
    },
    "Conditions" : {
       "IsReleaseLevel" : {"Fn::Equals" : [{"Ref" : "LansaTemplateLevel"}, "R"]},
       "IsWebServer" : {"Fn::Equals" : [{"Ref" : "LansaType"}, "WebServer"]},
       "DoesNotHaveUserScript" : {"Fn::Equals" : [{"Ref" : "UserScriptHook"}, ""]},
       "HasUserScript" : {"Fn::Not" : [{"Condition" : "DoesNotHaveUserScript"}]}
     },
    "Resources"                : {
         "WebServerGroup"      : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : {
                    "Fn::GetAZs" : ""
                },
                "LaunchConfigurationName" : {
                    "Ref" : "LaunchWebServer"
                },
                "MinSize"                 : { "Fn::If" : [ "IsWebServer", {"Ref" : "WebServerCapacity"}, "1" ]},
                "MaxSize"                 : { "Fn::If" : [ "IsWebServer", "150", "1" ]},
                "DesiredCapacity"         : { "Ref" : "WebServerCapacity" },
                "HealthCheckType"         : "ELB",
                "HealthCheckGracePeriod"  : 1800,
                "LoadBalancerNames"       : [ { "Ref" : "LoadBalancer" } ],
                "Tags" : [ {
                        "Key" : "Name",
                        "Value" : { "Fn::If" : [ "IsWebServer", "Web Server Instance", "DB Web Server Instance" ]},
                        "PropagateAtLaunch" : "true"
                     } ]

                 }
         },
         "LaunchWebServer"     : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
               "TriggerCakeUpdate"    : { "Ref" : "TriggerCakeUpdate" },
               "TriggerChefUpdate"    : { "Ref" : "TriggerChefUpdate" },
               "TriggerWindowsUpdate" : { "Ref" : "TriggerWindowsUpdate" },
               "TriggerWebConfig"     : { "Ref" : "TriggerWebConfig" },
               "TriggerIcingUpdate"   : { "Ref" : "TriggerIcingUpdate" },
               "TriggerPatchInstall"  : { "Ref" : "TriggerPatchInstall" },
               "SetConnectTrace"      : { "Ref" : "SetConnectTrace"},
               "SetIISTrace"          : { "Ref" : "SetIISTrace"},
               "SetXRUNEnvVar"        : { "Ref" : "SetXRUNEnvVar"},
               "AWS::CloudFormation::Init" : {
                  "configSets" : {
                     "icing-install" : ["install-cfn", "install-logging","install-msi", "setup-symlink","run-webconfig"],
                     "cfn-update" : ["install-cfn"],
                     "cake-update" : ["run-chef", "run-windows-update"],
                     "chef-update" : ["run-chef"],
                     "windows-update" : ["run-windows-update"],
                     "webconfig" : ["run-webconfig"],
                     "icing-update" : ["install-cfn", "upgrade-msi"],
                     "apply-patches" : ["install-patches"],
                     "SetXRUNEnvVar" : ["SetXRUNEnvVar"]
                     },
                  "install-cfn" : {
                     "files"    : {
                        "c:\\cfn\\cfn-hup.conf" : {
                           "content" : { "Fn::Join" : ["", [
                              "[main]\n",
                              "stack=",  { "Ref" : "AWS::StackId" }, "\n",
                              "region=", { "Ref" : "AWS::Region" }, "\n",
                              "interval=1\n",
                              "verbose=true\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-auto-reloader-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.AWS::CloudFormation::Init\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets cfn-update ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-cake.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-cake-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.TriggerCakeUpdate\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets cake-update ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-chef.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-chef-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.TriggerChefUpdate\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets chef-update ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-windows.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-windows-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.TriggerWindowsUpdate\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets windows-update ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-webconfig.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-webconfig-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.TriggerWebConfig\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets webconfig ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-icing.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-icing-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.TriggerIcingUpdate\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets icing-update ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-patch.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-patch-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.TriggerPatchInstall\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets apply-patches ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        },
                        "c:\\cfn\\hooks.d\\cfn-SetXRUNEnvVar.conf" : {
                           "content": { "Fn::Join" : ["", [
                              "[cfn-setxrunenvvar-hook]\n",
                              "triggers=post.update\n",
                              "path=Resources.LaunchWebServer.Metadata.SetXRUNEnvVar\n",
                              "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                                                            " -r LaunchWebServer",
                                                            " --configsets SetXRUNEnvVar ",
                                                            " --region ", { "Ref" : "AWS::Region" }, "\n"
                           ]]}
                        }
                     },
                     "services" : {
                        "windows" : {
                           "cfn-hup" : {
                              "enabled" : "true",
                              "ensureRunning" : "true",
                              "files" : [
                                 "c:\\cfn\\cfn-hup.conf", 
                                 "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf", 
                                 "c:\\cfn\\hooks.d\\cfn-cake.conf", 
                                 "c:\\cfn\\hooks.d\\cfn-chef.conf", 
                                 "c:\\cfn\\hooks.d\\cfn-windows.conf", 
                                 "c:\\cfn\\hooks.d\\cfn-icing.conf",
                                 "c:\\cfn\\hooks.d\\cfn-webconfig.conf",
                                 "c:\\cfn\\hooks.d\\cfn-patch.conf", 
                                 "c:\\cfn\\hooks.d\\cfn-SetXRUNEnvVar.conf",
                                 "C:\\LANSA\\MyApp.msi"]
                           }
                        }
                     }
                  },
                  "install-logging" : {
                     "files"    : {
                        "c:\\program files\\Amazon\\Ec2ConfigService\\Settings\\AWS.EC2.Windows.CloudWatch.json" : {
                           "source" : { "Fn::If" : [ "IsReleaseLevel", 
                                          "https://s3-ap-southeast-2.amazonaws.com/lansa/templates/AWS.EC2.Windows.CloudWatch.json", 
                                          "https://s3-ap-southeast-2.amazonaws.com/lansa/templates/beta/AWS.EC2.Windows.CloudWatch.json" ]}
                        },
                        "c:\\lansa\\install-logging.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/install-logging.ps1"
                        }
                     },
                     "commands" : {
                        "01_install_logging" : {
                           "command" : { "Fn::Join" : ["", [
                                 "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {",
                                 "C:\\LANSA\\install-logging.ps1", 
                                 " -stack ", { "Ref" : "AWS::StackName" },
                                 " -region ", { "Ref" : "AWS::Region" },
                                 " - ", 
                                 " -f32bit ", { "Ref" : "LansaMSIBitness" },
                                 ";exit $LastExitCode",
                                 "}\""
                              ]]},
                           "waitAfterCompletion" : "forever"
                        }
                     }
                  },
                  "install-msi" : {
                     "files"    : {
                        "C:\\LANSA\\MyApp.msi" : {
                           "source" : { "Ref" : "LansaMSI" }
                        },
                        "C:\\LANSA\\install-lansa-msi.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/install-lansa-msi.ps1"
                        }
                     },
                     "commands" : {
                        "01_install_msi" : {
                           "command" : { "Fn::Join" : ["", [
                                 "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {",
                                 "C:\\LANSA\\install-lansa-msi.ps1", 
                                 " -server_name ", { "Ref" : "DBEndPoint" },
                                 " -dbname ", { "Ref" : "DBName" },
                                 " -dbuser ", { "Ref" : "DBUsername" },
                                 " -dbpassword ", { "Ref" : "DBPassword" },
                                 " -webuser ", { "Ref" : "WebUser" },
                                 " -webpassword ", { "Ref" : "WebPassword" },
                                 " -f32bit ", { "Ref" : "LansaMSIBitness" },
                                 " -SUDB ", { "Fn::If" : [ "IsWebServer", "0", "1" ]},
                                 " -UPGD false",
                                 { "Fn::If" : [ "HasUserScript",  " -userscripthook ", "" ]},
                                 { "Fn::If" : [ "HasUserScript", { "Ref" : "UserScriptHook" }, "" ]},
                                 " -Wait ", { "Fn::Base64" : { "Ref" : "WaitHandle" }},
                                 ";exit $LastExitCode",
                                 "}\""
                              ]]},
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "upgrade-msi" : {
                     "files"    : {
                        "C:\\LANSA\\MyApp.msi" : {
                           "source" : { "Ref" : "LansaMSI" }
                        },
                        "C:\\LANSA\\install-lansa-msi.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/install-lansa-msi.ps1"
                        }
                     },
                     "commands" : {
                        "01_upgrade_msi" : {
                           "command" : { "Fn::Join" : ["", [
                                 "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {",
                                 "C:\\LANSA\\install-lansa-msi.ps1", 
                                 " -server_name ", { "Ref" : "DBEndPoint" },
                                 " -dbname ", { "Ref" : "DBName" },
                                 " -dbuser ", { "Ref" : "DBUsername" },
                                 " -dbpassword ", { "Ref" : "DBPassword" },
                                 " -webuser ", { "Ref" : "WebUser" },
                                 " -webpassword ", { "Ref" : "WebPassword" },
                                 " -f32bit ", { "Ref" : "LansaMSIBitness" },
                                 " -SUDB ", { "Fn::If" : [ "IsWebServer", "0", "1" ]},
                                 " -UPGD true",
                                 { "Fn::If" : [ "HasUserScript",  " -userscripthook ", "" ]},
                                 { "Fn::If" : [ "HasUserScript", { "Ref" : "UserScriptHook" }, "" ]},
                                 ";exit $LastExitCode",
                                 "}\""
                              ]]},
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "install-patches" : {
                     "files"    : {
                        "C:\\LANSA\\copy-s3-install-patches.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/copy-s3-install-patches.ps1"
                        }
                     },
                     "commands" : {
                        "01_install_patches" : {
                           "command" : { "Fn::Join" : ["", [
                                 "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {", 
                                 "C:\\LANSA\\copy-s3-install-patches.ps1", 
                                 " -dbpassword ", { "Ref" : "DBPassword" },
                                 " -webpassword ", { "Ref" : "WebPassword" },
                                 " -SUDB ", { "Fn::If" : [ "IsWebServer", "0", "1" ]},
                                 " -bucket_name ", { "Ref" : "PatchBucketName" },
                                 " -region ",      { "Ref" : "AWS::Region" },
                                 " -access_key ",  { "Ref" : "AccessKeyId" },
                                 " -secret_key ",  { "Ref" : "SecretKey"},
                                 " -folder ",      { "Ref" : "PatchFolderName" },
                                 ";exit $LastExitCode",
                                 "}\""
                              ]]},
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "setup-symlink" : {
                     "files"    : {
                        "C:\\LANSA\\regsymlink.exe" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/regsymlink.exe"
                        }
                     },
                     "commands" : {
                        "01_setup_symlink" : {
                           "command" : "c:\\lansa\\regsymlink.exe -c SOFTWARE\\LANSA \\Registry\\Machine\\Software\\Wow6432Node\\LANSA",
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "cloud-watch-config" : {
                     "files"    : {
                        "C:\\LANSA\\cloud-watch-config.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/cloud-watch-config.ps1"
                        }
                     },
                     "commands" : {
                        "01_cloud_watch_config" : {
                           "command" : { "Fn::Join" : ["", [
                                 "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {",
                                 "C:\\LANSA\\cloud-watch-config.ps1", 
                                 " -dbpassword ", { "Ref" : "DBPassword" },
                                 " -webpassword ", { "Ref" : "WebPassword" },
                                 " -SUDB ", { "Fn::If" : [ "IsWebServer", "0", "1" ]},
                                 " -bucket_name ", { "Ref" : "PatchBucketName" },
                                 " -region ",      { "Ref" : "AWS::Region" },
                                 " -access_key ",  { "Ref" : "AccessKeyId" },
                                 " -secret_key ",  { "Ref" : "SecretKey"},
                                 " -folder ",      { "Ref" : "PatchFolderName" },
                                 ";exit $LastExitCode",
                                 "}\""
                              ]]},
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "jit" : {
                     "commands" : {
                        "01_jit" : {
                           "command" : "C:\\program files (x86)\\lansa\\x_win95\\x_lansa\\execute\\x_run.exe proc=*INSTALL APPL=AWAMAPP",
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "run-windows-update" : {
                     "commands" : {
                        "01_windows_updates" : {
                           "command" : "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {C:\\recipes\\win-updates.ps1;exit $LastExitCode}\"",
                           "waitAfterCompletion" : "60"
                        }
                     }
                  },
                  "run-webconfig" : {
                     "files"    : {
                        "C:\\LANSA\\webconfig.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/webconfig.ps1"
                        }
                     },
                     "commands" : {
                        "01_webconfig" : {
                           "command" : { "Fn::Join" : ["", [
                                 "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {",
                                 "C:\\LANSA\\webconfig.ps1", 
                                 " -server_name ", { "Ref" : "DBEndPoint" },
                                 " -dbname ", { "Ref" : "DBName" },
                                 " -dbuser ", { "Ref" : "DBUsername" },
                                 " -dbpassword ", { "Ref" : "DBPassword" },
                                 " -webuser ", { "Ref" : "WebUser" },
                                 " -webpassword ", { "Ref" : "WebPassword" },
                                 " -f32bit ", { "Ref" : "LansaMSIBitness" },
                                 " -SUDB ", { "Fn::If" : [ "IsWebServer", "0", "1" ]},
                                 " -UPGD true",
                                 " -maxconnections ", { "Ref" : "WebServerMaxConnect"},
                                 { "Fn::If" : [ "HasUserScript",  " -userscripthook ", "" ]},
                                 { "Fn::If" : [ "HasUserScript", { "Ref" : "UserScriptHook" }, "" ]},
                                 ";exit $LastExitCode",
                                 "}\""
                              ]]},
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "SetXRUNEnvVar" : {
                     "files"    : {
                        "C:\\LANSA\\SetXRUNEnvVar.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/SetXRUNEnvVar.ps1"
                        }
                     },
                     "commands" : {
                        "01_SetXRUNEnvVar" : {
                           "command" : "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {C:\\LANSA\\SetXRUNEnvVar.ps1;exit $LastExitCode}\"",
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "run-chef" : {
                     "files"    : {
                        "C:\\LANSA\\run-chef.ps1" : {
                           "source" : "https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/run-chef.ps1"
                        }
                     },
                     "commands" : {
                        "01_run_chef_client" : {
                           "command" : { "Fn::Join" : ["", [
                                 "@powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {",
                                 "C:\\LANSA\\run-chef.ps1 ",
                                 "-cookbook VLWebServer::MainRecipe ",
                                 "-WorkingDirectory C:\\recipes\\chef-repo\\cookbooks",
                                 ";exit $LastExitCode",
                                 "}\""
                              ]]},
                           "waitAfterCompletion" : "0"
                        }
                     }
                  },
                  "AWS::CloudFormation::Authentication" : {
                        "S3AccessCreds" : {
		                  "type" : "S3",
		                  "accessKeyId"  : { "Ref" : "AccessKeyId" },
		                  "secretKey"    : { "Ref" : "SecretKey"},
		                  "buckets"      : [ "lansa" ]
                        }
                  }
               }
            },
            "Properties" : {
               "ImageId" : { "Ref" : "AMI" },
               "InstanceType" : { "Ref" : "InstanceType" },
               "IamInstanceProfile" : { "Ref" : "LogRoleInstanceProfile" },
               "SecurityGroups" : [ { "Ref" : "SecurityGroup" } ],
               "KeyName"        : { "Ref" : "KeyName" },
               "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                              "<script>\n",

                              "cfn-init.exe -v ",
                              "  --stack ", { "Ref" : "AWS::StackId" }, 
                              "  --resource LaunchWebServer",
                              "  --configsets icing-install ",
                              "  --region ", { "Ref" : "AWS::Region" }, "\n",

                              "cfn-signal.exe -e %ERRORLEVEL% ", { "Fn::Base64" : { "Ref" : "WaitHandle" }}, "\n",
          
                              "</script>\n"
               ]]}}
            }
         },
         "WaitHandle"          : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
         },
         "WaitCondition"       : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "WebServerGroup",
            "Properties" : {
                  "Handle"   : { "Ref" : "WaitHandle" },
                  "Timeout"  : "3000",
                  "Count"    : { "Ref" : "WebServerCapacity" }
            }
         },
         "ScaleOutPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
               "AdjustmentType" : "PercentChangeInCapacity",
               "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
               "Cooldown" : "300",
               "ScalingAdjustment" : "10"
            }
         },
         "ScaleInPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
               "AdjustmentType" : "PercentChangeInCapacity",
               "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
               "Cooldown" : "300",
               "ScalingAdjustment" : "-10"
            }
         },
         "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
               "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
               "AlarmActions": [ { "Ref": "ScaleOutPolicy" } ],
               "Namespace": "AWS/EC2",
               "MetricName": "CPUUtilization",
               "EvaluationPeriods": "1",
               "Statistic": "Average",
               "Period": "900",
               "Unit" : "Percent",
               "Threshold": "70",
               "ComparisonOperator": "GreaterThanThreshold",
               "Dimensions": [ {
                  "Name": "AutoScalingGroupName",
                  "Value": { "Ref": "WebServerGroup" }
               } ]
            }
         },
         "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
               "AlarmDescription": "Alarm if CPU too low",
               "AlarmActions": [ { "Ref": "ScaleInPolicy" } ],
               "Namespace": "AWS/EC2",
               "MetricName": "CPUUtilization",
               "EvaluationPeriods": "1",
               "Statistic": "Average",
               "Period": "900",
               "Unit" : "Percent",
               "Threshold": "30",
               "ComparisonOperator": "LessThanThreshold",
               "Dimensions": [ {
                  "Name": "AutoScalingGroupName",
                  "Value": { "Ref": "WebServerGroup" }
               } ]
            }
         }

    },
    "Outputs"                  : {
         "WebServerResult" : {
            "Value" : { "Fn::GetAtt" : [ "WaitCondition", "Data" ]},
            "Description" : "The data passed back as part of signalling the WaitCondition."
        }
    }
}